version: 2.0

# general
automatedReviewActive: true
kodusConfigFileOverridesWebPreferences: false
reviewCadence:
    type: 'automatic' # automatic | auto_pause | manual
    timeWindow: 15 # minutes
    pushesToTrigger: 3
pullRequestApprovalActive: false
isRequestChangesActive: false # not on gitlab
runOnDraft: true
ignorePaths:
    - 'yarn.lock'
    - 'package-lock.json'
    - 'package.json'
    - '.env'
ignoredTitleKeywords: []
baseBranches: []

# review categories
codeReviewVersion: 'v2' # legacy | v2
reviewOptions:
    # v2 / legacy
    bug: true
    performance: true
    security: true
    breaking_changes: true
    cross_file: true
    kody_rules: true

    # legacy only
    code_style: false
    refactoring: false
    error_handling: false
    maintainability: false
    potential_issues: false
    documentation_and_comments: false
    performance_and_optimization: false

# suggestion control
suggestionControl:
    groupingMode: 'full' # minimal | full
    applyFiltersToKodyRules: false
    limitationType: 'pr' # file | pr | severity
    maxSuggestions: 9 # min 7, no max
    severityLevelFilter: 'high' # low | medium | high | critical
    severityLimits: # when limitationType == severity
        low: 0
        medium: 0
        high: 0
        critical: 0

# PR summary
summary:
    generatePRSummary: true
    behaviourForNewCommits: 'none'
    behaviourForExistingDescription: 'replace'
    customInstructions: ''

# kody rules
ideRulesSyncEnabled: false
kodyRulesGeneratorEnabled: false

# custom messages
customMessages:
    globalSettings:
        hideComments: false # github only

    startReviewMessage:
        status: 'active' # active | inactive
        content: |
            # PR Summary (Comment created by [Kody](https://kodus.io) ü§ñ)

            ## Code Review Started! üöÄ

            ‚úã Hi, team! I'm already looking at the changed files and starting the review to ensure everything is in order. If you need more details, I'm here! [Kody](https://kodus.io)

            @changedFiles

            @changeSummary

    endReviewMessage:
        status: 'active' # active | inactive
        content: |
            ## Code Review Completed! üî•

            The code review was successfully completed based on your current configurations.



            <details>
            <summary>Kody Guide: Usage and Configuration</summary>

            <details>
            <summary>Interacting with Kody</summary>

            - **Request a Review:** Ask Kody to review your PR manually by adding a comment with the \`@kody start-review\` command at the root of your PR.

            - **Provide Feedback:** Help Kody learn and improve by reacting to its comments with a üëç for helpful suggestions or a üëé if improvements are needed.

            </details>

            <details>
            <summary>Current Kody Configuration</summary>

            @reviewOptions

            </details>

            **[Access your configuration settings here.](https://app.kodus.io/settings/code-review/global/general)**

            </details>

# Prompt overrides
v2PromptOverrides:
    categories:
        descriptions:
            bug: |
                Execution breaks: Code throws unhandled exceptions
                Wrong results: Output doesn't match expected behavior
                Resource leaks: Unclosed files, connections, memory accumulation
                State corruption: Invalid object/data states
                Logic errors: Control flow produces incorrect outcomes
                Race conditions: Concurrent access causes inconsistent state or duplicates
                Incorrect measurements: Metrics/timings that don't reflect actual operations
                Invariant violations: Broken constraints (size limits, uniqueness, etc.)
                Async timing bugs: Variables captured incorrectly in async closures
            performance: |
                Algorithm complexity: O(n¬≤) when O(n) is possible
                Redundant operations: Duplicate calculations or unnecessary loops
                Memory waste: Large allocations or leaks over time
                Blocking operations: Synchronous I/O in critical paths
                Database inefficiency: N+1, missing indexes, full scans
                Cache misses: Not leveraging available caching mechanisms
            security: |
                Injection vulnerabilities: SQL/NoSQL/command/LDAP injection
                AuthZ/AuthN flaws: Missing checks, privilege escalation
                Data exposure: Sensitive data in logs, responses, or errors
                Crypto issues: Weak algorithms, hardcoded keys, improper validation
                Input validation gaps: Missing sanitization or bounds checks
                Session management: Predictable tokens or missing expiration

    severity:
        flags:
            critical: |
                Application crash/downtime
                Data loss/corruption
                Security breach (unauthorized access/data exfiltration)
                Critical operation failure (auth/payment/authorization)
                Direct financial loss operations
                Memory leaks that inevitably crash production
            high: |
                Important functionality broken
                Memory leaks that cause eventual crash
                Performance degradation affecting UX under normal load
                Security issues with indirect exploitation paths
                Financial calculation errors affecting revenue
            medium: |
                Partially broken functionality
                Performance issues in specific scenarios
                Security weaknesses requiring specific conditions
                Incorrect but recoverable data
                Non-critical business logic errors with workarounds
            low: |
                Minor performance overhead
                Low-risk security improvements
                Incorrect metrics/logs
                Rarely affecting few users
                Edge-case issues
